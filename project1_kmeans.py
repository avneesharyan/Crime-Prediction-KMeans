# -*- coding: utf-8 -*-
"""Project1 KMeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SWceb9moDwaavhmtbyuPoABqKeEw79EQ
"""

!pip install gTTS  # Install the gTTS library

from gtts import gTTS
from IPython.display import Audio, display

# Define the introductory message
intro_message = (
    "Greetings, I am MONA, the personal assistant AI created by my master,Mr. Avneesh, Mr.Sudipta. "
    "Allow me to welcome you to the world of crime analysis. "
    "It's important to emphasize that this system is designed exclusively for noble and virtuous endeavors. "
    "Within this system, you have the power to scrutinize the crime statistics in various regions of India. "
    "Let us embark on this journey User."
    "Enter the state in which you want to analyse the crime rate and enter the year."
)

# Create a gTTS object for the intro message
intro_tts = gTTS(text=intro_message, lang='en')

# Save the generated speech as an MP3 file
intro_tts.save("intro.mp3")

# Play the intro message in Colab using the IPython Audio widget
intro_audio = Audio("intro.mp3", autoplay=True)
display(intro_audio)



# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from IPython.display import display, HTML

# Load your dataset
your_dataset = pd.read_csv('Book1.csv')

# Function to get crime statistics for a specific place and year
def get_crime_statistics(place, year):
    # Filter the data based on place and year
    filtered_data = your_dataset[(your_dataset['Place'] == place) & (your_dataset['Year'] == year)]

    # Check if data is available for the given place and year
    if filtered_data.empty:
        return "No data available for the given place and year."

    # Calculate crime statistics
    total_crimes = filtered_data['Total Crimes'].values[0]
    violent_crimes = filtered_data['Violent Crimes'].values[0]
    property_crimes = filtered_data['Property Crimes'].values[0]

    # Prepare the statistics message
    statistics_message = f"<h3>Crime Statistics for {place} in {year}:</h3>"
    statistics_message += f"<ul>"
    statistics_message += f"<li>Total Crimes: {total_crimes}</li>"
    statistics_message += f"<li>Violent Crimes: {violent_crimes}</li>"
    statistics_message += f"<li>Property Crimes: {property_crimes}</li>"
    statistics_message += f"</ul>"

    return statistics_message

# Function to plot bar graph of different crimes
def plot_bar_graph(place, year):
    # Filter the data based on place and year
    filtered_data = your_dataset[(your_dataset['Place'] == place) & (your_dataset['Year'] == year)]

    # Check if data is available for the given place and year
    if filtered_data.empty:
        return "No data available for the given place and year."

    # Get the different crime types and their counts
    crime_types = filtered_data.columns[3:]
    crime_counts = filtered_data.iloc[:, 3:].values[0]

    # Plot the bar graph
    plt.figure(figsize=(10, 6))
    sns.barplot(x=crime_types, y=crime_counts, palette='viridis')
    plt.xlabel('Crime Types')
    plt.ylabel('Count')
    plt.title(f'Crime Distribution in {place} ({year})')
    plt.xticks(rotation=45)
    plt.show()

# Function to plot pie chart of different crimes
def plot_pie_chart(place, year):
    # Filter the data based on place and year
    filtered_data = your_dataset[(your_dataset['Place'] == place) & (your_dataset['Year'] == year)]

    # Check if data is available for the given place and year
    if filtered_data.empty:
        return "No data available for the given place and year."

    # Get the different crime types and their counts
    crime_types = filtered_data.columns[3:]
    crime_counts = filtered_data.iloc[:, 3:].values[0]

    # Plot the pie chart
    plt.figure(figsize=(8, 8))
    plt.pie(crime_counts, labels=crime_types, autopct='%1.1f%%', colors=sns.color_palette('viridis'))
    plt.title(f'Crime Distribution in {place} ({year})')
    plt.show()

# Function to perform K-means clustering on crime data
def perform_kmeans(place, year, num_clusters, crime_types):
    # Filter the data based on place and year
    filtered_data = your_dataset[(your_dataset['Place'] == place) & (your_dataset['Year'] == year)]

    # Check if data is available for the given place and year
    if filtered_data.empty:
        return "No data available for the given place and year."

    # Get the crime counts for clustering
    crime_counts = filtered_data.iloc[:, 3:].values[0]

    # Perform K-means clustering
    kmeans = KMeans(n_clusters=num_clusters, random_state=42)
    kmeans.fit(crime_counts.reshape(-1, 1))
    cluster_labels = kmeans.labels_

    # Prepare the clustering results message
    results_message = f"<h3>K-means Clustering Results for {place} in {year} (Number of Clusters: {num_clusters}):</h3>"
    results_message += f"<ul>"
    for i in range(num_clusters):
        cluster_crime_types = crime_types[cluster_labels == i]
        results_message += f"<li>Cluster {i+1}: {', '.join(cluster_crime_types)}</li>"
    results_message += f"</ul>"

    return results_message

# Get user input for place and year
place = input("Enter the place: ")
year = int(input("Enter the year: "))

# Get and display crime statistics
statistics = get_crime_statistics(place, year)
display(HTML(statistics))

# Plot bar graph of different crimes
plot_bar_graph(place, year)

# Plot pie chart of different crimes
plot_pie_chart(place, year)

# Perform K-means clustering on crime data
# Perform K-means clustering on crime data
num_clusters = int(input("Enter the number of clusters for K-means clustering: "))
crime_types = your_dataset.columns[3:]  # Retrieve crime_types from the dataset columns
clustering_results = perform_kmeans(place, year, num_clusters, crime_types)
display(HTML(clustering_results))